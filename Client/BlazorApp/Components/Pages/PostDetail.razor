@page "/post-details/{postId:int}"
@using System.Security.Claims
@using ApiContracts.Post
@using ApiContracts.Comment
@using BlazorApp.Components.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IPostService PostService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Post Detail</PageTitle>

<h3>Post Detail</h3>

@if (post == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">@post.Title</h5>
            <p class="card-text">@post.Body</p>
            <p class="card-text">Author: @post.UserName</p>
            <p class="card-text">Likes: @post.Likes</p>
            <p class="card-text">Dislikes: @post.Dislikes</p>
            <p class="card-text">User id: @post.UserId</p>
            <h6>Comments</h6>
            <ul>
                @foreach (var comment in comments)
                {
                    <li>@comment.Body - <em>@comment.AuthorName</em></li>
                }
            </ul>
        </div>
    </div>

    <h3>Add a Comment</h3>
    <EditForm Model="@newComment" OnValidSubmit="HandleCommentSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="commentBody">Comment</label>
            <InputTextArea id="commentBody" class="form-control" @bind-Value="newComment.Body" />
        </div>
        <button type="submit" class="btn btn-primary">Submit Comment</button>
    </EditForm>
}

@code {
    [Parameter] public int postId { get; set; }
    private PostDto post;
    private List<CommentDto> comments = new List<CommentDto>();
    private CommentDto newComment = new CommentDto();

    private string currentUserId;

    protected override async Task OnInitializedAsync()
    {
        await LoadPostDetails();
        await SetCurrentUserId(); 
    }

    private async Task LoadPostDetails()
    {
        post = await PostService.GetPostByIdAsync(postId);
        comments = await PostService.GetCommentsByPostIdAsync(postId);
    }

    private async Task SetCurrentUserId()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        Console.WriteLine($"Is user authenticated: {user.Identity.IsAuthenticated}");

        if (user.Identity.IsAuthenticated)
        {
            // Extract user ID from claims and log it for debugging
            currentUserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            Console.WriteLine($"Current User ID: {currentUserId}");
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
            currentUserId = null; // Ensure it's cleared if user isn't authenticated
        }
    }



    private async Task HandleCommentSubmit()
    {
        if (!string.IsNullOrEmpty(currentUserId))
        {
            newComment.UserId = int.Parse(currentUserId);  // Use the updated UserId
            newComment.PostId = postId; // Ensure the correct PostId is set here
            
            Console.WriteLine($"Submitting comment: {newComment.Body} by {newComment.AuthorName} for PostId {newComment.PostId}");
            await PostService.AddCommentToPostAsync(postId, newComment);

            await LoadPostDetails();
            Console.WriteLine($"Comments count after submit: {comments.Count}");
            foreach (var comment in comments)
            {
                Console.WriteLine($"Comment: {comment.Body} by {comment.AuthorName} on PostId {comment.PostId}");
            }

            newComment = new CommentDto(); // Reset the comment form
        }
        else
        {
            Console.WriteLine("User not logged in, comment not submitted.");
        }
    }
}
