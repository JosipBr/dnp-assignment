@page "/create-user"
@inject NavigationManager NavMgr
@inject IUserService UserService
@using ApiContracts
@using BlazorApp.Components.Services

@rendermode @(new InteractiveServerRenderMode(false))

<h3>Create New User</h3>


Here you can browse interesting posts. 
<button @onclick='() => NavMgr.NavigateTo("/")'>go to login</button>

<EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="newUser.UserName" />
        <ValidationMessage For="@(() => newUser.UserName)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" @bind-Value="newUser.Password" />
        <ValidationMessage For="@(() => newUser.Password)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Create User</button>
    </div>
</EditForm>

@if (isSuccess)
{
    <div class="alert alert-success">
        User created successfully!
    </div>
}
@if (errorMessage != null)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@code {
    private CreateUserDto newUser = new CreateUserDto
    {
        UserName = string.Empty,
        Password = string.Empty
    };
    private bool isSuccess = false;
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            await UserService.AddUserAsync(newUser);
            isSuccess = true;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = $"Error: {ex.Message}";
        }
    }
}